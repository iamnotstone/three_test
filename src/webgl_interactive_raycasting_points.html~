<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - interactive - raycasting - points</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #ffffff;
				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}
			#info {
				position: absolute;
				top: 0px;
				width: 100%;
				padding: 5px;
				font-family: Monospace;
				font-size: 13px;
				text-align: center;
				font-weight: bold;
			}
			a {
				color: #fff;
			}
		</style>
	</head>

	<body>
		<div id="container"></div>
		<div id="info"><a href="http://threejs.org" target="_blank" rel="noopener">three.js</a> webgl - interactive - raycasting - points </div>

		<script src="/three.js"></script>

		<script src="js/WebGL.js"></script>
		<script src="js/controls/OrthographicTrackballControls.js"></script>
		<script src="js/libs/stats.min.js"></script>

		<script>

			if ( WEBGL.isWebGLAvailable() === false ) {

				document.body.appendChild( WEBGL.getWebGLErrorMessage() );

			}

			var renderer, scene, camera, stats;
			var pointclouds;
			var raycaster;
			var mouse = new THREE.Vector2();
			var intersection = null;
			var spheres = [];
			var spheresIndex = 0;
			var clock;

			var threshold = 0.1;
			var pointSize = 0.5;
			var width = 1;
			var length = 2;
			var rotateY = new THREE.Matrix4().makeRotationY( 0.005 );

			init();
			animate();

			function generatePointCloudGeometry( color, width, length ) {

				var geometry = new THREE.BufferGeometry();
				var numPoints = width * length;

				var positions = new Float32Array( numPoints * 3 );
				var colors = new Float32Array( numPoints * 3 );

				var k = 0;

				for ( var i = 0; i < width; i ++ ) {

					for ( var j = 0; j < length; j ++ ) {

						var u = i / width;
						var v = j / length;
						var x = u - 0.5;
						var y = ( Math.cos( u * Math.PI * 4 ) + Math.sin( v * Math.PI * 8 ) ) / 20;
						var z = v - 0.5;

						positions[ 3 * k ] = x;
						positions[ 3 * k + 1 ] = y;
						positions[ 3 * k + 2 ] = z;

						var intensity = ( y + 0.1 ) * 5;
						colors[ 3 * k ] = color.r * intensity;
						colors[ 3 * k + 1 ] = color.g * intensity;
						colors[ 3 * k + 2 ] = color.b * intensity;

						k ++;

					}

				}

				geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
				//geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );
				//geometry.computeBoundingBox();
				//geometry.attributes.position.setXYZ(0, -2, 0.05, -2)

				return geometry;

			}

			function generatePointcloud( color, width, length ) {

				var geometry = generatePointCloudGeometry( color, width, length );
				//var material = new THREE.PointsMaterial( { size: pointSize, vertexColors: THREE.VertexColors } );
				var material = new THREE.PointsMaterial( { size: pointSize, color: color } );

				return  new THREE.Points( geometry, material );

			}

			function init() {

				var container = document.getElementById( 'container' );

				scene = new THREE.Scene();

				clock = new THREE.Clock();

				camera1 = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 10000 );

				var aspect = window.innerWidth / window.innerHeight
				var frustumSize = 30
				camera = new THREE.OrthographicCamera( 0.5 * frustumSize * aspect / - 2, 0.5 * frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, 1, 50000 );
				camera.position.set( 10, 10, 10 );
				camera.lookAt( scene.position );
				//camera.updateMatrix();
				//camera1.position.set(10, 10, 10);
				//camera1.lookAt( scene.position)
				//camera1.updateMatrix()

				//
				controls = new THREE.OrthographicTrackballControls( camera );

				controls.rotateSpeed = 1.0;
				controls.zoomSpeed = 1.2;
				controls.panSpeed = 0.8;

				controls.noZoom = false;
				controls.noPan = false;

				controls.staticMoving = true;
				controls.dynamicDampingFactor = 0.3;

				controls.keys = [ 65, 83, 68 ];

				var pcBuffer = generatePointcloud( new THREE.Color( 0, 1, 0 ), width, length );
				pcBuffer.scale.set( 5, 10, 10 );
				pcBuffer.position.set( 0, 0, 0 );
				scene.add( pcBuffer );


				setTimeout(movePoint, 5000)
				function movePoint(){
					pcBuffer.geometry.attributes.position.setXYZ(0, -2, 0.05, -2)
					pcBuffer.geometry.attributes.position.needsUpdate = true
					pcBuffer.geometry.computeBoundingBox();
				}


				//pointclouds = [ pcBuffer, pcIndexed, pcIndexedOffset ];
				pointclouds = [ pcBuffer];

				//

				var sphereGeometry = new THREE.SphereBufferGeometry( 0.1, 32, 32 );
				var sphereMaterial = new THREE.MeshBasicMaterial( { color: 0xff0000 } );

				for ( var i = 0; i < 40; i ++ ) {

					var sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );
					scene.add( sphere );
					spheres.push( sphere );

				}

				//

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );

				//

				raycaster = new THREE.Raycaster();
				raycaster.params.Points.threshold = threshold;

				//

				stats = new Stats();
				container.appendChild( stats.dom );

				//

				window.addEventListener( 'resize', onWindowResize, false );
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );

			}

			function onDocumentMouseMove( event ) {

				event.preventDefault();

				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
				controls.handleResize()
			}

			function animate() {

				requestAnimationFrame( animate );

				render();
				controls.update()
				stats.update();

			}

			var toggle = 0;

			function render() {

				//camera.applyMatrix( rotateY );
				//camera.updateMatrixWorld();

				raycaster.setFromCamera( mouse, camera );

				var intersections = raycaster.intersectObjects( pointclouds );
				intersection = ( intersections.length ) > 0 ? intersections[ 0 ] : null;

				if ( toggle > 0.02 && intersection !== null ) {

					spheres[ spheresIndex ].position.copy( intersection.point );
					spheres[ spheresIndex ].scale.set( 1, 1, 1 );
					spheresIndex = ( spheresIndex + 1 ) % spheres.length;

					toggle = 0;

				}

				for ( var i = 0; i < spheres.length; i ++ ) {

					var sphere = spheres[ i ];
					sphere.scale.multiplyScalar( 0.98 );
					sphere.scale.clampScalar( 0.01, 1 );

				}

				toggle += clock.getDelta();

				renderer.render( scene, camera );
				//renderer.render( scene, camera1 );

			}

		</script>

	</body>

</html>
